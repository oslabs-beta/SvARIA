import { e as element, t as text, a as attr, i as insert, b as append, c as action_destroyer, l as listen, s as set_data, n as noop, d as detach, r as run_all, f as bubble, S as SvelteComponent, g as init, h as safe_not_equal } from './index-CbvjJfF0.js';
import './index-DC8zqID4.js';

var define_import_meta_env_default = { BASE_URL: "/", MODE: "production", DEV: false, PROD: true, SSR: false };
const toRGBArray = (rgbStr) => rgbStr.match(/\d+/g).map(Number);
function ariaLabelcheck(curNode) {
  if (define_import_meta_env_default.VITE_SVARIA_MODE != "debug") {
    return;
  }
  if (curNode.attributes["aria-label"]) {
    console.log(`${curNode.nodeName}, with id of ${curNode.id}: check passed: aria-label present`);
  }
  if (!curNode.attributes["aria-label"]) {
    console.warn(
      `${curNode.nodeName}, with id of ${curNode.id}: This type of element requires a property called an aria-label. Please add one`
    );
  }
}
function getColors(curNode) {
  const compStyles = window.getComputedStyle(curNode);
  let backgroundColor = compStyles.getPropertyValue("background-color");
  let iterations = 0;
  let parentNode = curNode.parentNode;
  while (backgroundColor == "rgba(0, 0, 0, 0)" && iterations < 3) {
    const compStylesParent2 = window.getComputedStyle(parentNode);
    backgroundColor = compStylesParent2.getPropertyValue("background-color");
    iterations++;
    parentNode = parentNode.parentNode;
  }
  if (backgroundColor == "rgba(0, 0, 0, 0)") {
    backgroundColor = "rgb(255, 255, 255)";
  }
  let foregroundColor = compStyles.getPropertyValue("color");
  const compStylesParent = window.getComputedStyle(parentNode);
  let parentBackgroundColor = compStylesParent.getPropertyValue("background-color");
  while (parentBackgroundColor == "rgba(0, 0, 0, 0)" && iterations < 3) {
    const compStylesParent2 = window.getComputedStyle(parentNode);
    parentBackgroundColor = compStylesParent2.getPropertyValue("background-color");
    iterations++;
    parentNode = parentNode.parentNode;
  }
  if (parentBackgroundColor == "rgba(0, 0, 0, 0)") {
    parentBackgroundColor = null;
  }
  return { backgroundColor, foregroundColor, parentBackgroundColor };
}
function colorContrastCheck(curNode) {
  if (define_import_meta_env_default.VITE_SVARIA_MODE != "debug") {
    return;
  }
  const { parentBackgroundColor, foregroundColor, backgroundColor } = getColors(curNode);
  checkColors(curNode, foregroundColor, backgroundColor, false);
}
function parentColorContrastCheck(curNode) {
  const { parentBackgroundColor, foregroundColor, backgroundColor } = getColors(curNode);
  if (parentBackgroundColor == null) console.log("Cannot check parent background color");
  else checkColors(curNode, backgroundColor, parentBackgroundColor, true);
}
function checkColors(curNode, foregroundColor, backgroundColor, isParent) {
  const parentString = isParent ? "'s parent" : "";
  if (foregroundColor === backgroundColor) {
    console.error(
      `${curNode.nodeName}${parentString}, with id of ${curNode.id}: Background and text colors do not meet contrast requirement, please adjust colors`
    );
    return;
  }
  fetch("https://www.aremycolorsaccessible.com/api/are-they", {
    mode: "cors",
    method: "POST",
    body: JSON.stringify({ colors: [backgroundColor, foregroundColor] })
  }).then((response) => response.json()).then((json) => {
    if (json.overall == "Yup") {
    } else if (json.overall == "Kinda") {
      console.warn(
        `${curNode.nodeName}${parentString}, with id of ${curNode.id}: Background and foreground colors contrast colors can be improved`
      );
    } else {
      console.error(
        `${curNode.nodeName}${parentString}, with id of ${curNode.id}: Background and foreground colors do not meet contrast requirement, please adjust colors`
      );
    }
  });
}

/* src/lib/Button_ts.svelte generated by Svelte v4.2.18 */

function create_fragment(ctx) {
	let button;
	let t;
	let ariaLabelcheck_action;
	let colorContrastCheck_action;
	let parentColorContrastCheck_action;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			t = text(/*content*/ ctx[0]);
			attr(button, "id", /*id*/ ctx[2]);
			attr(button, "aria-label", /*ariaLabel*/ ctx[1]);
			attr(button, "class", /*className*/ ctx[4]);
			attr(button, "style", /*style*/ ctx[3]);
			attr(button, "type", /*type*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);

			if (!mounted) {
				dispose = [
					action_destroyer(ariaLabelcheck_action = ariaLabelcheck.call(null, button)),
					action_destroyer(colorContrastCheck_action = colorContrastCheck.call(null, button)),
					action_destroyer(parentColorContrastCheck_action = parentColorContrastCheck.call(null, button)),
					listen(button, "click", /*click_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*content*/ 1) set_data(t, /*content*/ ctx[0]);

			if (dirty & /*id*/ 4) {
				attr(button, "id", /*id*/ ctx[2]);
			}

			if (dirty & /*ariaLabel*/ 2) {
				attr(button, "aria-label", /*ariaLabel*/ ctx[1]);
			}

			if (dirty & /*className*/ 16) {
				attr(button, "class", /*className*/ ctx[4]);
			}

			if (dirty & /*style*/ 8) {
				attr(button, "style", /*style*/ ctx[3]);
			}

			if (dirty & /*type*/ 32) {
				attr(button, "type", /*type*/ ctx[5]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach(button);
			}

			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { content = "This is a button" } = $$props;
	let { ariaLabel = content } = $$props;
	let { id = "" } = $$props;
	let { style = "" } = $$props;
	let { className = "bg-black text-white text-bold hover:bg-gray-700" } = $$props;
	let { type = "button" } = $$props;

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('content' in $$props) $$invalidate(0, content = $$props.content);
		if ('ariaLabel' in $$props) $$invalidate(1, ariaLabel = $$props.ariaLabel);
		if ('id' in $$props) $$invalidate(2, id = $$props.id);
		if ('style' in $$props) $$invalidate(3, style = $$props.style);
		if ('className' in $$props) $$invalidate(4, className = $$props.className);
		if ('type' in $$props) $$invalidate(5, type = $$props.type);
	};

	return [content, ariaLabel, id, style, className, type, click_handler];
}

class Button_ts extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			content: 0,
			ariaLabel: 1,
			id: 2,
			style: 3,
			className: 4,
			type: 5
		});
	}
}

export { Button_ts as default };
//# sourceMappingURL=Button_ts-CZ4S2oiF.js.map
