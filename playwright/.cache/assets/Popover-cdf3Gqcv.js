import { g as globals, c as create_slot, e as element, a as create_component, s as space, b as attr, n as null_to_empty, i as insert, d as append, m as mount_component, l as listen, f as action_destroyer, u as update_slot_base, h as get_all_dirty_from_scope, j as get_slot_changes, t as transition_in, k as transition_out, o as detach, p as destroy_component, r as run_all, q as empty, v as group_outros, w as check_outros, x as onMount, y as binding_callbacks, S as SvelteComponent, z as init, A as safe_not_equal } from './index-BX3tJMsz.js';
import { B as Button_ts, a as ariaLabelcheck, c as colorContrastCheck } from './Button_ts-C-PV7mXT.js';

/* src/lib/Popover.svelte generated by Svelte v4.2.18 */

const { window: window_1 } = globals;
const get_content_slot_changes = dirty => ({});
const get_content_slot_context = ctx => ({});
const get_header_slot_changes = dirty => ({});
const get_header_slot_context = ctx => ({});

// (61:0) {#if showPopover}
function create_if_block(ctx) {
	let div1;
	let div0;
	let button;
	let t0;
	let t1;
	let div1_class_value;
	let div1_style_value;
	let ariaLabelcheck_action;
	let colorContrastCheck_action;
	let current;
	let mounted;
	let dispose;

	button = new Button_ts({
			props: {
				id: /*closeButtonId*/ ctx[9],
				content: /*closeButtonContent*/ ctx[10],
				ariaLabel: /*closeButtonAriaLabel*/ ctx[11],
				style: /*closeButtonStyle*/ ctx[13],
				className: /*closeButtonClass*/ ctx[12]
			}
		});

	button.$on("click", /*click_handler_1*/ ctx[21]);
	const header_slot_template = /*#slots*/ ctx[19].header;
	const header_slot = create_slot(header_slot_template, ctx, /*$$scope*/ ctx[18], get_header_slot_context);
	const content_slot_template = /*#slots*/ ctx[19].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[18], get_content_slot_context);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(button.$$.fragment);
			t0 = space();
			if (header_slot) header_slot.c();
			t1 = space();
			if (content_slot) content_slot.c();
			attr(div0, "role", "dialog");
			attr(div0, "id", /*contentId*/ ctx[2]);
			attr(div0, "aria-modal", "true");
			attr(div0, "aria-labelledby", /*popoverId*/ ctx[0]);
			attr(div0, "aria-describedby", /*popoverId*/ ctx[0]);
			attr(div1, "id", /*popoverId*/ ctx[0]);
			attr(div1, "class", div1_class_value = "" + (null_to_empty(`${/*popoverClass*/ ctx[1]} popover-container`) + " svelte-1o5xa23"));
			attr(div1, "style", div1_style_value = `${/*style*/ ctx[3]}; display: ${/*showPopover*/ ctx[14] ? 'block' : 'none'};`);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(button, div0, null);
			append(div0, t0);

			if (header_slot) {
				header_slot.m(div0, null);
			}

			append(div0, t1);

			if (content_slot) {
				content_slot.m(div0, null);
			}

			/*div1_binding*/ ctx[22](div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "close", /*close_handler*/ ctx[23]),
					action_destroyer(ariaLabelcheck_action = ariaLabelcheck.call(null, div1)),
					action_destroyer(colorContrastCheck_action = colorContrastCheck.call(null, div1))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*closeButtonId*/ 512) button_changes.id = /*closeButtonId*/ ctx[9];
			if (dirty & /*closeButtonContent*/ 1024) button_changes.content = /*closeButtonContent*/ ctx[10];
			if (dirty & /*closeButtonAriaLabel*/ 2048) button_changes.ariaLabel = /*closeButtonAriaLabel*/ ctx[11];
			if (dirty & /*closeButtonStyle*/ 8192) button_changes.style = /*closeButtonStyle*/ ctx[13];
			if (dirty & /*closeButtonClass*/ 4096) button_changes.className = /*closeButtonClass*/ ctx[12];
			button.$set(button_changes);

			if (header_slot) {
				if (header_slot.p && (!current || dirty & /*$$scope*/ 262144)) {
					update_slot_base(
						header_slot,
						header_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(header_slot_template, /*$$scope*/ ctx[18], dirty, get_header_slot_changes),
						get_header_slot_context
					);
				}
			}

			if (content_slot) {
				if (content_slot.p && (!current || dirty & /*$$scope*/ 262144)) {
					update_slot_base(
						content_slot,
						content_slot_template,
						ctx,
						/*$$scope*/ ctx[18],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[18])
						: get_slot_changes(content_slot_template, /*$$scope*/ ctx[18], dirty, get_content_slot_changes),
						get_content_slot_context
					);
				}
			}

			if (!current || dirty & /*contentId*/ 4) {
				attr(div0, "id", /*contentId*/ ctx[2]);
			}

			if (!current || dirty & /*popoverId*/ 1) {
				attr(div0, "aria-labelledby", /*popoverId*/ ctx[0]);
			}

			if (!current || dirty & /*popoverId*/ 1) {
				attr(div0, "aria-describedby", /*popoverId*/ ctx[0]);
			}

			if (!current || dirty & /*popoverId*/ 1) {
				attr(div1, "id", /*popoverId*/ ctx[0]);
			}

			if (!current || dirty & /*popoverClass*/ 2 && div1_class_value !== (div1_class_value = "" + (null_to_empty(`${/*popoverClass*/ ctx[1]} popover-container`) + " svelte-1o5xa23"))) {
				attr(div1, "class", div1_class_value);
			}

			if (!current || dirty & /*style, showPopover*/ 16392 && div1_style_value !== (div1_style_value = `${/*style*/ ctx[3]}; display: ${/*showPopover*/ ctx[14] ? 'block' : 'none'};`)) {
				attr(div1, "style", div1_style_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(header_slot, local);
			transition_in(content_slot, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			transition_out(header_slot, local);
			transition_out(content_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div1);
			}

			destroy_component(button);
			if (header_slot) header_slot.d(detaching);
			if (content_slot) content_slot.d(detaching);
			/*div1_binding*/ ctx[22](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let button;
	let t;
	let if_block_anchor;
	let current;
	let mounted;
	let dispose;

	button = new Button_ts({
			props: {
				id: /*openButtonId*/ ctx[4],
				content: /*openButtonContent*/ ctx[5],
				ariaLabel: /*openButtonAriaLabel*/ ctx[6],
				style: /*openButtonStyle*/ ctx[7],
				className: /*openButtonClass*/ ctx[8]
			}
		});

	button.$on("click", /*click_handler*/ ctx[20]);
	let if_block = /*showPopover*/ ctx[14] && create_if_block(ctx);

	return {
		c() {
			create_component(button.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window_1, "click", /*handleClick*/ ctx[16]),
					listen(window_1, "keydown", /*handleKeyDown*/ ctx[17])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const button_changes = {};
			if (dirty & /*openButtonId*/ 16) button_changes.id = /*openButtonId*/ ctx[4];
			if (dirty & /*openButtonContent*/ 32) button_changes.content = /*openButtonContent*/ ctx[5];
			if (dirty & /*openButtonAriaLabel*/ 64) button_changes.ariaLabel = /*openButtonAriaLabel*/ ctx[6];
			if (dirty & /*openButtonStyle*/ 128) button_changes.style = /*openButtonStyle*/ ctx[7];
			if (dirty & /*openButtonClass*/ 256) button_changes.className = /*openButtonClass*/ ctx[8];
			button.$set(button_changes);

			if (/*showPopover*/ ctx[14]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*showPopover*/ 16384) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(t);
				detach(if_block_anchor);
			}

			destroy_component(button, detaching);
			if (if_block) if_block.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { popoverId = "" } = $$props;
	let { popoverClass = "bg-white text-black rounded-lg shadow dark:bg-gray-700 dark:text-white p-4 md:p-5 space-y-4" } = $$props;
	let { contentId = "popoverContentId" } = $$props;
	let { style = "" } = $$props;
	let { openButtonId = "openPopover" } = $$props;
	let { openButtonContent = "show Popover" } = $$props;
	let { openButtonAriaLabel = "Open Popover" } = $$props;
	let { openButtonStyle = "" } = $$props;
	let { openButtonClass = "bg-black text-white" } = $$props;
	let { closeButtonId = "closePopoverButtonId" } = $$props;
	let { closeButtonContent = "X" } = $$props;
	let { closeButtonAriaLabel = "Close Popover" } = $$props;
	let { closeButtonClass = "bg-black text-white" } = $$props;
	let { closeButtonStyle = "closePopoverStyle" } = $$props;
	let showPopover = false;
	let buttonElement;
	let popoverElement;

	onMount(() => {
		positionPopover();
	});

	function positionPopover() {
		if (buttonElement && popoverElement) {
			const rect = buttonElement.getBoundingClientRect();
			$$invalidate(15, popoverElement.style.position = "absolute", popoverElement);
			$$invalidate(15, popoverElement.style.top = `${rect.bottom + window.scrollY}px`, popoverElement);
			$$invalidate(15, popoverElement.style.left = `${rect.left + window.scrollX}px`, popoverElement);
		}
	}

	function handleClick(event) {
		if (showPopover && popoverElement && !popoverElement.contains(event.target)) {
			$$invalidate(14, showPopover = false);
		}
	}

	function handleKeyDown(event) {
		if (event.key === "Escape") {
			console.log("escape");
			$$invalidate(14, showPopover = false);
		}
	}

	const click_handler = event => {
		event.stopPropagation();
		$$invalidate(14, showPopover = true);
	};

	const click_handler_1 = () => {
		$$invalidate(14, showPopover = false);
	};

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			popoverElement = $$value;
			$$invalidate(15, popoverElement);
		});
	}

	const close_handler = () => {
		$$invalidate(14, showPopover = false);
	};

	$$self.$$set = $$props => {
		if ('popoverId' in $$props) $$invalidate(0, popoverId = $$props.popoverId);
		if ('popoverClass' in $$props) $$invalidate(1, popoverClass = $$props.popoverClass);
		if ('contentId' in $$props) $$invalidate(2, contentId = $$props.contentId);
		if ('style' in $$props) $$invalidate(3, style = $$props.style);
		if ('openButtonId' in $$props) $$invalidate(4, openButtonId = $$props.openButtonId);
		if ('openButtonContent' in $$props) $$invalidate(5, openButtonContent = $$props.openButtonContent);
		if ('openButtonAriaLabel' in $$props) $$invalidate(6, openButtonAriaLabel = $$props.openButtonAriaLabel);
		if ('openButtonStyle' in $$props) $$invalidate(7, openButtonStyle = $$props.openButtonStyle);
		if ('openButtonClass' in $$props) $$invalidate(8, openButtonClass = $$props.openButtonClass);
		if ('closeButtonId' in $$props) $$invalidate(9, closeButtonId = $$props.closeButtonId);
		if ('closeButtonContent' in $$props) $$invalidate(10, closeButtonContent = $$props.closeButtonContent);
		if ('closeButtonAriaLabel' in $$props) $$invalidate(11, closeButtonAriaLabel = $$props.closeButtonAriaLabel);
		if ('closeButtonClass' in $$props) $$invalidate(12, closeButtonClass = $$props.closeButtonClass);
		if ('closeButtonStyle' in $$props) $$invalidate(13, closeButtonStyle = $$props.closeButtonStyle);
		if ('$$scope' in $$props) $$invalidate(18, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*showPopover*/ 16384) {
			$: if (showPopover) {
				setTimeout(positionPopover, 0);
			}
		}
	};

	return [
		popoverId,
		popoverClass,
		contentId,
		style,
		openButtonId,
		openButtonContent,
		openButtonAriaLabel,
		openButtonStyle,
		openButtonClass,
		closeButtonId,
		closeButtonContent,
		closeButtonAriaLabel,
		closeButtonClass,
		closeButtonStyle,
		showPopover,
		popoverElement,
		handleClick,
		handleKeyDown,
		$$scope,
		slots,
		click_handler,
		click_handler_1,
		div1_binding,
		close_handler
	];
}

class Popover extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			popoverId: 0,
			popoverClass: 1,
			contentId: 2,
			style: 3,
			openButtonId: 4,
			openButtonContent: 5,
			openButtonAriaLabel: 6,
			openButtonStyle: 7,
			openButtonClass: 8,
			closeButtonId: 9,
			closeButtonContent: 10,
			closeButtonAriaLabel: 11,
			closeButtonClass: 12,
			closeButtonStyle: 13
		});
	}
}

export { Popover as default };
//# sourceMappingURL=Popover-cdf3Gqcv.js.map
